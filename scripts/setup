#!/usr/bin/env perl
package main;

use 5.010;
use strict;
use warnings;
use Pod::Usage;
import flow;
our $VERSION    = 0.1.9;

$flow::retryWait = 30;

regPackageSuite({
    "zabbix-agent"      => ['zabbix-agent'],
    "zabbix-server"     => {
        'ubuntu' => ['zabbix-server-mysql', 'zabbix-frontend-php', 'php5-mysql', 'mysql-client'],
        'centos' => ['zabbix-server-mysql-2.2.7', 'zabbix-web-mysql-2.2.7', 'mariadb'],
    },
    "mysql-server"      => {
        'ubuntu' => ['mysql-server'],
        'centos' => ['mariadb-server'],
    },
    "perl-jsonrpc"      => {
        'ubuntu' => ['libjson-rpc-perl'],
        'centos' => ['perl-JSON-RPC'],
    },
    "sendemail"         => ['sendemail'],
    "selinux-util"      => ['policycoreutils-python']
});

sub centosPrepare {
  my $rpmRepo = "http://mirror.kaiyuanshe.org/zabbix/zabbix/2.2/rhel/7/x86_64/zabbix-release-2.2-1.el7.noarch.rpm";
  runCmd("rpm -q --quiet zabbix-release || rpm -i --quiet $rpmRepo && sed -i s/repo\.zabbix\.com/mirror.kaiyuanshe.org\\\\/zabbix/ /etc/yum.repos.d/zabbix.repo");
}

regFlows({
    agent   => sub {
        my $regStep = shift;
        my $config = shift;

        unless ($config->{'serverIp'}){
            pod2usage(
                -msg        => "serverIp not set",
                -sections   => "DESCRIPTION",
                -verbose    => 99);
        }

        my $zabbixServerIp = $config->{'serverIp'};
        require Sys::Hostname;
        my $host = &Sys::Hostname::hostname;

        my $confAgentDir = "/etc/zabbix/zabbix_agentd.conf.d";
        my $confAgent = << "EOM";
Hostname=$host
PidFile=/var/run/zabbix/zabbix_agentd.pid
Server=$zabbixServerIp
ServerActive=$zabbixServerIp
Include=$confAgentDir
EOM

        my $confAzureVM = <<"EOM";
UserParameter=azure.vm.agent.alive,ps aux |grep -c "[w]aagent -daemon"
EOM

        $regStep->("Prepare on CentOS", \&centosPrepare) if (getDistro() =~ /centos/);

        $regStep->("Install Zabbix Agent package.", sub {
            installPackageSuite("zabbix-agent");
        });
        $regStep->("Configure zabbix agent.", sub {
            installFile('/etc/zabbix/zabbix_agentd.conf', $confAgent)
            || runCmd("mkdir -p $confAgentDir")
            || installFile("$confAgentDir/azure_vm.conf", $confAzureVM);
        });
        $regStep->("Enable Zabbix Agent service.", sub {
            enableService('zabbix-agent');
        });
        $regStep->("Restart Zabbix Agent service.", sub {
            restartService('zabbix-agent');
        });
    },
    server  => sub {
        my $regStep = shift;
        my $config = shift;
        unless ($config->{'mysqlPassword'}){
            pod2usage(
                -msg        => "server configuration not well set",
                -sections   => [qw(DESCRIPTION CONFIGKEY/SERVER)],
                -verbose    => 99);
        }

        my $dbLocalhost     = 'localhost';

        my $dbServerHost    = $config->{'mysqlHost'} // $dbLocalhost;
        my $zabbixDb        = $config->{'mysqlDbName'} // 'zabbix';
        my $zabbixUser      = $config->{'mysqlUser'} // 'zabbix';
        my $zabbixPassword  = $config->{'mysqlPassword'};

        my $smtpServer      = $config->{'smtpServer'   };
        my $smtpUser        = $config->{'smtpUser'     };
        my $smtpPassword    = $config->{'smtpPassword' };
        my $smtpTo          = $config->{'smtpTo'       };

        if($dbServerHost=~/(.*):/){
          $dbServerHost = $1;
        }

        $regStep->("Prepare on CentOS", \&centosPrepare) if (getDistro() =~ /centos/);

        $regStep->("Install Zabbix Server package.", sub{
            installPackageSuite("zabbix-server");
        });
        $regStep->("Configure apache.", sub{
            my $confServerApachePhp = << 'EOM';
<Directory "/usr/share/zabbix">
  Require all granted
</Directory>
Alias /zab /usr/share/zabbix
php_value max_execution_time 300
php_value memory_limit 128M
php_value post_max_size 16M
php_value upload_max_filesize 2M
php_value max_input_time 300
php_value date.timezone UTC
EOM

            if (-d '/etc/apache2') {
                installFile('/etc/apache2/conf-available/zabbix.conf', $confServerApachePhp)
                || runCmd("a2enconf zabbix");
            }elsif (-d '/etc/httpd'){
                installFile('/etc/httpd/conf.d/zabbix.conf', $confServerApachePhp)
            } else {
                -1
            }
        });

        $regStep->("Create database.", sub {
            my $dbSetup = << "EOM";
create database if not exists $zabbixDb character set utf8 collate utf8_bin;
grant all privileges on $zabbixDb.* to $zabbixUser\@localhost identified by "$zabbixPassword";
EOM
            installPackageSuite('mysql-server');
            restartService('mariadb');
            enableService("mariadb");
            runCmd("mysql -e '$dbSetup'");
        }) if ($dbServerHost eq $dbLocalhost);

        $regStep->("Test db connection.", sub {
            runCmd("mysql -h \"$dbServerHost\" -u\"$zabbixUser\" -p'$zabbixPassword' \"$zabbixDb\" -e \"\"");
        });

        $regStep->("Configure initial db.", sub {
            my $confServerPhp = << "EOM";
<?php
global \$DB;

\$DB['TYPE']     = 'MYSQL';
\$DB['SERVER']   = '$dbServerHost';
\$DB['PORT']     = '0';
\$DB['DATABASE'] = '$zabbixDb';
\$DB['USER']     = '$zabbixUser';
\$DB['PASSWORD'] = '$zabbixPassword';

\$ZBX_SERVER      = 'localhost';
\$ZBX_SERVER_PORT = '10051';
\$ZBX_SERVER_NAME = '';
\$IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
?>
EOM

            my $confServer = << "EOM";
DBHost=$dbServerHost
DBName=$zabbixDb
DBUser=$zabbixUser
DBPassword=$zabbixPassword
PidFile=/var/run/zabbix/zabbix_server.pid
EOM

            my $confDefault = << 'EOM';
START=yes
CONFIG_FILE="/etc/zabbix/zabbix_server.conf"
EOM

            my $catsql;
            if(-d '/usr/share/zabbix-server-mysql'){
                $catsql = "zcat /usr/share/zabbix-server-mysql/schema.sql.gz "
                        ."/usr/share/zabbix-server-mysql/images.sql.gz "
                        ."/usr/share/zabbix-server-mysql/data.sql.gz";
            }else {
                $catsql = "cat /usr/share/doc/zabbix-server-mysql-2.2*/create/schema.sql "
                        ."/usr/share/doc/zabbix-server-mysql-2.2*/create/images.sql "
                        ."/usr/share/doc/zabbix-server-mysql-2.2*/create/data.sql";
            }

            if(-d '/etc/zabbix/web/') {
                installFile('/etc/zabbix/web/zabbix.conf.php', $confServerPhp)
            } else {
                installFile('/etc/zabbix/zabbix.conf.php', $confServerPhp)
            }

            runCmd("$catsql |mysql -h \"$dbServerHost\" -u\"$zabbixUser\" -p'$zabbixPassword' \"$zabbixDb\"")
            || installFile('/etc/zabbix/zabbix_server.conf', $confServer)
            || installFile('/etc/default/zabbix-server', $confDefault);
        });

        if (-x '/usr/sbin/semodule'){
          $regStep->("Configure selinux.", sub{
            installPackageSuite("selinux-util");


            my $log = << "EOM";
type=AVC msg=audit(1477461524.352:480): avc:  denied  { name_connect } for  pid=1852 comm="/usr/sbin/httpd" dest=10051 scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:object_r:zabbix_port_t:s0 tclass=tcp_socket
type=AVC msg=audit(1479693715.631:287): avc:  denied  { name_connect } for  pid=1924 comm="zabbix_server" dest=3306 scontext=system_u:system_r:zabbix_t:s0 tcontext=system_u:object_r:mysqld_port_t:s0 tclass=tcp_socket
type=AVC msg=audit(1479694135.883:346): avc:  denied  { name_connect } for  pid=2504 comm="/usr/sbin/httpd" dest=3306 scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:object_r:mysqld_port_t:s0 tclass=tcp_socket
EOM
            installFile('zabbix_sw.input', $log)
            || runCmd("audit2allow -M zabbix_sw < zabbix_sw.input")
            || runCmd("semodule -i zabbix_sw.pp");
          });
        }

        $regStep->("Enable and restart service.", sub{
          restartService('zabbix-server');
          if(getDistro() =~ /centos/) {
            enableService('httpd');
            enableService('zabbix-server');
            restartService('httpd');
          } else {
            restartService('apache2');
          }
        });

        $regStep->("Configure azure specific tempalte.", sub {
            installPackageSuite("perl-jsonrpc");    # for regTemplate
            require JSON::RPC::Legacy::Client;
            our $client      = new JSON::RPC::Legacy::Client;
            my $endpoint    = 'http://127.0.0.1/zab/';
            our $uri         = $endpoint."api_jsonrpc.php";

            sub callrpc
            {
                my $callobj = shift;
                my $res = $client->call($uri, $callobj);

                if($res) {
                    if ($res->is_error) {
                        say "Error : ", $res->error_message;
                        return 1;
                    }
                    else {
                        return (0, $res->result);
                    }
                }
                else {
                    say "Error code: ", $client->status_line;
                    return 2;
                }
            }

            my $authRequest = 
            {
                "jsonrpc", "2.0",
                "method", "user.login",
                "params", {
                    "user", "Admin",
                    "password", "zabbix"
                },
                "id", 0,
                "auth", undef
            };
            
            my $ret;
            my $token;
            ($ret, $token) = callrpc($authRequest);

            open FL,'<','templateAzureVmLinux.xml';
            my $xml;
            {
                local $/ = undef;
                $xml = <FL>;
            }
            close FL;

            my $importRequest  = 
            {
                "jsonrpc", "2.0",
                "method", "configuration.import",
                "params", {
                    "format", "xml",
                    "rules", {
                        "templates", {
                            "createMissing", 1
                        },
                        "items", {
                            "createMissing", 1
                        },
                        "triggers",{
                            "createMissing", 1
                        },
                        "templateLinkage",{
                            "createMissing", 1
                        },
                    },
                    "source", "$xml"
                },
                "auth", "$token",
                "id", 1
            };

            ($ret, $token) = callrpc($importRequest);
            return $ret;
        });

        $regStep->("Configure autoreg.", sub{
            my $autoRegSetup = <<'EOM';
INSERT INTO \`actions\` VALUES (7,'autoreg1',2,0,0,0,'Auto registration: {HOST.HOST}','Host name: {HOST.HOST}\r\nHost IP: {HOST.IP}\r\nAgent port: {HOST.PORT}',0,'','');
INSERT INTO \`operations\` VALUES (7,7,6,0,1,1,0);
INSERT INTO \`optemplate\` VALUES (2,7,10105);
EOM
            runCmd("mysql -h \"$dbServerHost\" -u\"$zabbixUser\" -p'$zabbixPassword' \"$zabbixDb\" -e \"$autoRegSetup\"");
        });

        $regStep->("Configure mail media.", sub {
          my $mailBin;
          if ($smtpServer && $smtpUser && $smtpPassword){
            $mailBin = << "EOM";
#!/bin/sh
sendEmail -f notification\@noreply.org -t "\$1" -u "\$2" -m "\$3" -s $smtpServer -xu $smtpUser -xp $smtpPassword
EOM
          } else {
            $mailBin = << "EOM";
#!/bin/sh
sendEmail -f notification\@noreply.org -t "\$1" -u "\$2" -m "\$3"
EOM
          }
            my $alertScriptsPath = '/etc/zabbix/alertscripts';
            my $mailBinPath = "$alertScriptsPath/zabbixMail";

            my $smtpMailMediaSetup = <<"EOM";
INSERT INTO \\`media_type\\` VALUES (4,1,'smtpMail','','','','zabbixMail','','','',0);
INSERT INTO \\`media\\` VALUES (1,1,4,'$smtpTo',0,63,'1-7,00:00-24:00');
UPDATE \\`actions\\` SET status=0 WHERE actionid=3;
EOM

            installPackageSuite('sendemail')
            && runCmd("curl http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz| "
              ."tar zxO sendEmail-v1.56/sendEmail > /usr/local/bin/sendEmail && chmod +x /usr/local/bin/sendEmail");
            runCmd("mkdir -p $alertScriptsPath");
            runCmd("ln -s $alertScriptsPath /usr/share/zabbix/");

            installFile($mailBinPath, $mailBin)
            || runCmd("chmod +x $mailBinPath")
            || runCmd("mysql -h \"$dbServerHost\" -u\"$zabbixUser\" -p'$zabbixPassword' \"$zabbixDb\" -e \"$smtpMailMediaSetup\"");
        }) if ($smtpTo);
    }
});
&runFlows;


BEGIN{
# Module flow, provides flow running logic and some system utils.
package flow;
use 5.010;
use strict;
use warnings;
use Exporter qw(import);
use Getopt::Long;
use Pod::Usage;
our $VERSION = '0.2.7';

use constant {
  LOGERR   => 1,
  LOGINFO  => 2,
  LOGDEBUG => 3,
};

our @EXPORT = qw(
    mlog regFlows runFlows
    regPackageSuite installPackageSuite
    runCmd enableService restartService getDistro installFile
);

our $retryCount = 5;
our $retryWait  = 3;

my $logPrefix = "";
my $verbosity = LOGINFO;
my $dryrun    = 1;
my %flows;
my %commonConfig;
my %specialConfigs;
my $packageSuites = {};
my $serviceManager;

sub parseOpt {
  Getopt::Long::Configure qw(gnu_getopt);
  my $optHelp;
  my $optVerbose;
  my $optQuiet;
  my $optDryrun;
  my %optConfig;

  GetOptions(
    'help|h'     => \$optHelp,
    'verbose|v'  => \$optVerbose,
    'quiet|q'    => \$optQuiet,
    'dryrun|n'   => \$optDryrun,
    'config|c=s' => \%optConfig,
  ) || exit(1);
  pod2usage(-1) if $optHelp;
  $verbosity = $optVerbose ? LOGDEBUG : ( $optQuiet ? LOGERR : LOGINFO );
  $dryrun = $optDryrun;
  foreach my $key ( keys %optConfig ) {
    if ( $key =~ /(.*?)\.(.*)/ ) {
      $specialConfigs{$1} = {} if ( !$specialConfigs{$1} );
      $specialConfigs{$1}->{$2} = $optConfig{$key};
    }
    else {
      $commonConfig{$key} = $optConfig{$key};
    }
  }
}

sub mlog {
  my $msg = shift;
  my $level = shift || LOGINFO;
  say $logPrefix.$msg if ( $verbosity >= $level );
  return $level == LOGERR ? 1 : 0;
}

sub regFlows {
  for my $flowsRef (@_) { for my $key ( keys %$flowsRef ) { $flows{$key} = $flowsRef->{$key}; } }
}

sub runFlows {
  &parseOpt;

  $serviceManager = getServiceManager();
  my @flownames = @ARGV;

  unless (@flownames) {
    if (%flows) {
      my $jo = join( ',', sort keys %flows );
      mlog("Supported flows: $jo");
    }
    else {
      mlog("No registered flows found.");
    }

    exit(6);
  }

  my @matchedNames;
  my @supporedFlows = ( keys %flows );

  foreach my $flowname (@flownames) {
    unless ( $flows{$flowname} ) {
      my @matched = grep {/^$flowname/i} @supporedFlows;
      my $matchedLen = @matched;

      if ( $matchedLen == 1 ) {
        $flowname = $matched[0];
      }
      else {
        my $msg
            = ( $matchedLen == 0 )
            ? "Flow '$flowname' not found."
            : "Multiple flows match '$flowname' found:"
            . join( ',', sort @matched ) . '.';
        mlog( $msg, LOGERR );

        exit(7);
      }
    }

    push @matchedNames, $flowname;
  }

  foreach my $flowname (@matchedNames) {
    $logPrefix = "[$flowname] ";
    mlog("Begin flow");
    my $flowConfig = {%commonConfig};
    if ( my $so = $specialConfigs{$flowname} ) {
      foreach my $key ( keys %{$so} ) { $flowConfig->{$key} = $so->{$key}; }
    }

    my @stepCol = ();
    my $ret = &{ $flows{$flowname} }(
      sub {
        my $name = shift;
        my $sub  = shift;
        if ($name) { push @stepCol, { name => $name, run => $sub, }; }
        else       { @stepCol = (); }
        0;
      },
      $flowConfig
    );

    if ($ret) {
      mlog "failed with code: $ret";
      exit(2);
    }

    runSteps( \@stepCol );
    mlog("End flow");
  }
}

sub runSteps {
  my $steps = shift;
  my $len   = @$steps;
  my $index = 0;
  foreach my $step (@$steps) {
    ++$index;
    mlog "($index/$len) $step->{name}";
    my $run   = $step->{run};
    my $ret   = &$run;
    my $retry = $retryCount;
    while ( $ret && $retry ) {
      mlog "Failed with code: $ret. $retry retries remaining, wait ${retryWait}s...";
      sleep($retryWait);
      --$retry;
      $ret = &$run;
    }

    if ($ret) {
      mlog "failed with code: $ret";
      exit(2);
    }
  }
}

sub installFile {
  my $path    = shift;
  my $content = shift;
  return 0 if $dryrun;

  open( my $FL, '>', $path ) or return mlog( "Error writing to $path: $!.", LOGERR );
  print $FL $content;
  close $FL;
  return 0;
}

sub runCmd {
  my $cmd  = shift;
  mlog "Run command:\n$cmd", LOGDEBUG;
  return 0 if $dryrun;
  $cmd .= " >/dev/null" if ( $verbosity < LOGINFO );
  my $rcmd = ($cmd =~ /["']/) ? 'bash '._writeTmpFile([$cmd, "\n"]) : $cmd;
  my $ret = system($rcmd);
  $ret = $ret >> 8 if ($ret > 0);
  mlog("Return code is $ret", LOGDEBUG);
  return $ret;
}

sub regPackageSuite {
  my $suites    = shift;
  for my $suiteName (keys %$suites){
    $packageSuites->{$suiteName} = $suites->{$suiteName};
  }
}

sub installPackageSuite {
  my $suiteName      = shift;
  my $packageManager = getPackageManager();
  return 1 unless $packageManager;

  my $packagesRef;
  unless ( exists $packageSuites->{$suiteName} ) {
    mlog("Package suite $suiteName not supported.");
    exit(3);
  }

  $packagesRef = $packageSuites->{$suiteName};
  if (ref $packagesRef eq 'HASH') {
    my $distro = getDistro();
    my $found = [];
    for my $name (keys %$packagesRef){
      if ($distro =~ /$name/){
        $found = $packagesRef->{$name}; last;
      }
    }

    $packagesRef = $found;
  }

  return 0 unless @$packagesRef;
  my $packageLine = join( " ", @$packagesRef );
  my $packageVerify = $packageManager->{verify};
  if ($packageVerify) {
    if ( runCmd("$packageVerify $packageLine > /dev/null 2>&1") == 0 ) {
      mlog("Already installed.", LOGDEBUG);
      return 0;
    }
  }

  my $packageInstall = $packageManager->{install};
  my $cmd            = "$packageInstall $packageLine";
  mlog "Begin install packages:$packageLine", LOGDEBUG;
  my $ret = runCmd( $cmd );
  $ret = runCmd("$packageVerify $packageLine") if ( !$ret && $packageVerify );
  if ( !$ret ) { mlog( "Install succeed.", LOGDEBUG ); }
  else {
    mlog( "Install failed. Try update.", LOGDEBUG );
    my $packageUpdate = $$packageManager{refresh};
    runCmd($packageUpdate);
    $ret = runCmd($cmd);
    if ( !$ret ) { mlog( "Install succeed.", LOGDEBUG ); }
    else         { mlog( "Install failed.", LOGDEBUG );  }
  }

  return $ret;
}

sub _hasCmd {
  my $cmd = shift;
  return ( runCmd("which $cmd > /dev/null 2>&1") == 0 );
}

# Add verification for yum since it does not fail on missing package.
sub getPackageManager() {
  my %pm = (
    aptitude => {
      install =>
          "DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install",
      refresh => "apt-get update",
      # verify  => 'dpkg -l',          # need check count
    },
    yum => {
      install => "yum -y -q install",
      verify  => "rpm -q --quiet",
      refresh => "yum -y -q install epel-release"
    },
    pacman => {
      install => 'pacman -S',
      refresh => 'pacman -Sy',
      verify  => 'pacman -Qq',
    }
  );

  return $pm{aptitude} if _hasCmd('apt-get');
  return $pm{yum}      if _hasCmd('yum');
  return $pm{pacman}   if _hasCmd('pacman');

  mlog( "Package manager not supported.", LOGERR );
  exit(4);
}

sub enableService { return _runServiceManager(shift, 'enable'); }
sub restartService { return _runServiceManager(shift, 'restart'); }

sub _runServiceManager {
  return 1 unless $serviceManager;
  my $serviceName = shift;
  my $cmd         = shift;
  my $action      = $$serviceManager{$cmd} or return mlog("Serivce operation not supported.", LOGERR);
  return runCmd(sprintf($action, $serviceName));
}

sub getServiceManager {
  my %pm = (
    systemctl => { 
      enable  => 'systemctl enable %1$s', 
      restart => 'systemctl restart %1$s', 
    },
    upstart   => { 
      enable  => 'echo %s',
      restart => 'service %s restart',
    }
  );

  return $pm{systemctl} if _hasCmd('systemctl');
  return $pm{upstart}   if _hasCmd('status 2> /dev/null');
  mlog( "Service manager not supported.", LOGERR );
  exit(5);
}

sub getDistro {
  my $id         = '';
  my $version_id = '';
  if ( open( my $fl, '<', '/etc/os-release' ) ) {
    while (<$fl>) {
      if    (/^ID="?(.*?)"?$/)         { $id         = $1; }
      elsif (/^VERSION_ID="?(.*?)"?$/) { $version_id = $1; }
    }

    close $fl;
  }

  return $id . $version_id;
}

sub _writeTmpFile {
  my $lines = shift;
  use File::Temp qw/ tempfile /;
  my $tmpFileHandle;
  my $tmpFilePath;
  ( $tmpFileHandle, $tmpFilePath ) = tempfile( UNLINK => 1 );
  print $tmpFileHandle @$lines;
  close($tmpFileHandle);
  return $tmpFilePath;
}

1;
}

__END__
=head1 NAME

run - Install server/agent for monitoring

=head1 SYNOPSIS

run [-nqv] <server|agent> [-c configKey=configValue]

=head1 DESCRIPTION

B<This program> will help setup monitoring agent/server.

For agent setup, the server ip address should be given.

For server setup, the backend database information could be specified.

=head1 OPTIONS

=over 4

=item B<-n>

Dry run.

=item B<-q>

Show less information.

=item B<-v>

Be more verbose.

=item B<-c>

Key configruation.

=back

=head1 CONFIGKEY

=head2 AGENT

=over 4

=item B<agent.serverIp>

Required. Specify server ip address.

=back

=head2 SERVER

=over 4

=item B<server.mysqlHost>

Specify database host.
If this option is not given or set to localhost, will setup a new MySQL instance on localhost.
Otherwise an existing mysql will be used.


=item B<server.mysqlDbName>

Specify the name for monitoring database.

=item B<server.mysqlUser>

Specify the username for monitoring database.

=item B<server.mysqlPassword>

Specify the password for monitoring database.

=back

=cut
